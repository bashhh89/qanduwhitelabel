// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id          String   @id @default(uuid())
  name        String
  domain      String   @unique
  logo        String?
  primaryColor String?
  secondaryColor String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tenant configuration
  features    Json     @default("{}")
  settings    Json     @default("{}")
  
  // Relationships
  users       User[]
  jobs        Job[]
  companies   Company[]
  candidates  Candidate[]
  applications JobApplication[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      String   @default("recruiter")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Company {
  id          String   @id @default(uuid())
  name        String
  logo        String?
  description String?
  website     String?
  industry    String?
  size        String?
  location    String?
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
}

model BrandingContent {
  id               String   @id @default(cuid())
  type             String   // 'image', 'video', 'text', 'image_prompt'
  title            String
  content          String
  order            Int
  generatedImageUrl String?
  subtitle         String?
  description      String?
  category         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  requirements String
  benefits    String?
  department  String?
  location    String
  type        String
  experience  String?
  salary      Json?
  status      String   @default("draft")
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  applications JobApplication[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
  @@index([companyId])
}

model Candidate {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  resumeUrl   String?
  skills      String[]
  experience  Json[]
  education   Json[]
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  applications JobApplication[]
  assessments Assessment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
  @@index([email])
}

model JobApplication {
  id          String   @id @default(uuid())
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id])
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  status      String   @default("pending")
  stage       String   @default("new")
  coverLetter String?
  feedback    String?
  rating      Int?
  interviews  Interview[]
  notes       Note[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
  @@index([jobId])
  @@index([candidateId])
}

model Interview {
  id              String   @id @default(uuid())
  applicationId   String
  application     JobApplication @relation(fields: [applicationId], references: [id])
  type           String   // video, phone, onsite
  scheduledAt    DateTime
  duration       Int      // in minutes
  status         String   @default("scheduled")
  feedback       String?
  recording      String?  // URL to video recording if applicable
  notes          Note[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([applicationId])
}

model Assessment {
  id          String   @id @default(uuid())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  type        String   // skill_test, personality, coding_challenge
  score       Int?
  results     Json?
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([candidateId])
}

model Note {
  id          String   @id @default(uuid())
  content     String
  type        String   @default("general") // general, feedback, interview
  applicationId String?
  application JobApplication? @relation(fields: [applicationId], references: [id])
  interviewId String?
  interview   Interview? @relation(fields: [interviewId], references: [id])
  createdBy   String    // User ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([applicationId])
  @@index([interviewId])
}

model CareerPageContent {
  id                  String      @id @default(uuid()) @db.Uuid
  createdAt           DateTime    @default(now()) @map("created_at")
  sectionType         String      @map("section_type")
  content             Json?
  aiGeneratedContent  Json?       @map("ai_generated_content")
  jobs                Job[]
  teamMembers         TeamMember[]

  @@map("career_page_content")
}

model TeamMember {
  id                  String      @id @default(uuid()) @db.Uuid
  createdAt           DateTime    @default(now()) @map("created_at")
  careerPageContentId String?     @map("career_page_content_id") @db.Uuid
  careerPageContent   CareerPageContent? @relation(fields: [careerPageContentId], references: [id])
  name                String
  title               String?
  bio                 String?
  imageUrl            String?     @map("image_url")

  @@map("team_members")
}

model Application {
  id                   String      @id @default(uuid()) @db.Uuid
  createdAt            DateTime    @default(now()) @map("created_at")
  jobId                String?     @map("job_id") @db.Uuid
  job                  Job?        @relation(fields: [jobId], references: [id])
  userName             String?     @map("user_name")
  conversationHistory  Json?       @map("conversation_history")
  applicationData      Json?       @map("application_data")
  feedback             String?
  adminDashboardViewed Boolean     @default(false) @map("admin_dashboard_viewed")

  @@map("applications")
  @@index([jobId])
  @@index([createdAt])
}
